# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

" A Step represents a period of time on a given radio Station."
interface Step {
    " End time of the step"
    end: Int
    " The unique identifier of a step"
    id: ID!
    " Start time of the step"
    start: Int
}

" A blank step is a step without diffusion"
type BlankStep implements Step {
    " Step within the current step"
    children: [Step]
    " End time of the step"
    end: Int
    " The unique identifier of a step"
    id: ID!
    " Start time of the step"
    start: Int
    " Step's title"
    title: String
}

" A Brand is a web or broadcast radio station. "
type Brand {
    " Brand's baseline"
    baseline: String
    " Brand's description"
    description: String
    " The unique identifier of a brand "
    id: ID!
    " live stream"
    liveStream: String
    " List of available local radios"
    localRadios: [LocalRadio]
    " Brand's title "
    title: String!
    " List of available webradios"
    webRadios: [WebRadio]
    " Brand's website URL"
    websiteUrl: String
}

" An Diffusion is an occurence of a radio Show on a given Station."
type Diffusion {
    " The unique identifier of an diffusion"
    id: ID!
    " Diffusion's expiration (expired if the first podcastEpisode is expired)"
    isStreamable: Boolean
    " Personnalities associates to a Diffusion"
    personalitiesConnection: DiffusionPersonalitiesConnection
    " List of associated podcats"
    podcastEpisode: PodcastEpisode
    " Diffusion's publication date"
    published_date: String
    " Show"
    show: Show
    " Diffusion's standFirst"
    standFirst: String
    " Diffusion's taxonomies"
    taxonomiesConnection: DiffusionTaxonomiesConnection
    " Diffusion's title"
    title: String!
    " Website's URL of the Diffusion"
    url: String
}

type DiffusionEdge {
    cursor: String!
    node: Diffusion
}

type DiffusionPersonalitiesConnection {
    edges: [DiffusionPersonalitiesEdge]
}

type DiffusionPersonalitiesEdge {
    info: String
    node: Personality
    relation: String
}

" A diffusion step is a step with an diffusion"
type DiffusionStep implements Step {
    " Step within the current step"
    children: [Step]
    diffusion: Diffusion
    " End time of the step"
    end: Int
    " The unique identifier of a step"
    id: ID!
    " Start time of the step"
    start: Int
}

type DiffusionTaxonomiesConnection {
    edges: [DiffusionTaxonomiesEdge]
}

type DiffusionTaxonomiesEdge {
    info: String
    node: Taxonomy
    relation: String
}

type Diffusions {
    edges: [DiffusionEdge]
}

" Paginated grid wrapper with page info"
type GridEdge {
    " Cursor for the next page"
    cursor: String
    " Current Grid page"
    node: GridPage
}

" Paginated Grid"
type GridPage {
    " Array of grid Step items"
    steps: [Step]
}

" This object contains a show, a program and a song"
type Live {
    " A station program in show"
    program: Step
    " A station show"
    show: Step
    " A station song in program"
    song: TrackStep
}

" This object contains a local radio: a local radio is a radio covering a restricted geographical area and belongs to a network as France Bleu or FIP. "
type LocalRadio {
    " Local radio's description"
    description: String
    " The unique identifier of a local radio"
    id: ID!
    " live stream"
    liveStream: String
    " Local radio's title"
    title: String!
}

" A Personality is an individual or an organisation."
type Personality {
    " The unique identifier of a personality"
    id: ID!
    " Personality's name"
    name: String!
}

" An object referencing links to a podcast"
type Podcast {
    " Link to iTunes"
    itunes: String
    " Link to the RSS stream"
    rss: String!
}

" A PodcastEpisode is a media file in a given format / resolution."
type PodcastEpisode {
    " PodcastEpisode's creation date"
    created: Int!
    " The diffusion associate to the manifestation"
    diffusion: Diffusion
    " PodcastEpisode's duration"
    duration: Int
    " The unique identifier of a manifestation"
    id: ID!
    " PodcastEpisode's title"
    title: String!
    " PodcastEpisode's URL"
    url: String!
}

type Query {
    " Get a specific station"
    brand(
        " station id"
        id: StationsEnum!
    ): Brand
    " Get the list of stations available"
    brands: [Brand]
    " Get diffusions from specific Show url"
    diffusionsOfShowByUrl(
        " Cursor use that to paginate"
        after: String,
        " Limit of show to return. Default=10 Max=100"
        first: Int,
        " Show's url"
        url: String!
    ): Diffusions
    " Get the program schedule of a specific station"
    grid(
        " End time (timestamp)"
        end: Int,
        " Tracks are ignored by default. This flag allows you to also retrieve TrackSteps. Default to 'false'"
        includeTracks: Boolean,
        " Start time (timestamp)"
        start: Int,
        " Station's id"
        station: StationsEnum!
    ): [Step]
    live(
        " Station's id"
        station: StationsEnum!
    ): Live
    " Get a paginated Grid for a specific station"
    paginatedGrid(
        " Cursor for pagination"
        after: String,
        " End time (timestamp)"
        end: Int,
        " Tracks are ignored by default. This flag allows you to also retrieve TrackSteps. Default to 'false'"
        includeTracks: Boolean,
        " Start time (timestamp)"
        start: Int,
        " Station's id"
        station: StationsEnum!
    ): GridEdge
    " Get a specific show by ID"
    show(
        " Show's ID"
        id: ID!
    ): Show
    " Get a specific show by url"
    showByUrl(
        " Show's url"
        url: String!
    ): Show
    " Get list of shows for a specific Station"
    shows(
        " Cursor use that to paginate"
        after: String,
        " Limit of show to return. Default=10 Max=100"
        first: Int,
        " Station's id"
        station: StationsEnum!
    ): Shows
}

" A radio show"
type Show {
    " Diffusions associates to a Show"
    diffusionsConnection: ShowDiffusionsConnection
    " The unique identifier of a Show"
    id: ID!
    " Personnalities associates to a Show"
    personalitiesConnection: ShowPersonalitiesConnection
    " Links to the show's podcast"
    podcast: Podcast
    " Show's standFirst"
    standFirst: String
    " Taxonomies associates to a Show"
    taxonomiesConnection: ShowTaxonomiesConnection
    " Show's title"
    title: String!
    " Website's URL of the Concept"
    url: String
}

type ShowDiffusionsConnection {
    edges: [ShowDiffusionsEdge]
}

type ShowDiffusionsEdge {
    cursor: String!
    node: Diffusion
}

type ShowEdge {
    cursor: String!
    node: Show
}

type ShowPersonalitiesConnection {
    edges: [ShowPersonalitiesEdge]
}

type ShowPersonalitiesEdge {
    info: String
    node: Personality
    relation: String
}

type ShowTaxonomiesConnection {
    edges: [ShowTaxonomiesEdge]
}

type ShowTaxonomiesEdge {
    info: String
    node: Taxonomy
    relation: String
}

type Shows {
    edges: [ShowEdge]
}

" A taxonomy can be a tag, a category..."
type Taxonomy {
    " Taxonomy's ID"
    id: ID!
    " Taxonomy's path"
    path: String!
    " Taxonomy's standFirst"
    standFirst: String
    " Taxonomy's title"
    title: String
    " Taxonomy's type"
    type: String
}

" A Track represents an audio track."
type Track {
    " Track's album title"
    albumTitle: String
    " Track's authors"
    authors: [String]
    " Track's composers"
    composers: [String]
    " Track's disc Number"
    discNumber: Int
    " Track's ID"
    id: ID!
    " Track's artists"
    label: String
    " Track's main artists"
    mainArtists: [String]
    " Track's performers"
    performers: [String]
    " Track's production date"
    productionDate: Int
    " Track's title"
    title: String!
    " Track's number"
    trackNumber: Int
}

" A track step is a step with a song/track"
type TrackStep implements Step {
    " End time of the step"
    end: Int
    " The unique identifier of a step"
    id: ID!
    " Start time of the step"
    start: Int
    " Song"
    track: Track
}

" This object contains a webradio: a webradio is a continuous stream of programs defined by the grid. "
type WebRadio {
    " Webradio's description"
    description: String
    " The unique identifier of a webradio"
    id: ID!
    " live stream"
    liveStream: String
    " Webradio's title"
    title: String!
}

" List of Radio France brands, local radios and webradios "
enum StationsEnum {
    ELSASS
    FIP
    FIP_BORDEAUX
    FIP_ELECTRO
    FIP_GROOVE
    FIP_JAZZ
    FIP_METAL
    FIP_NANTES
    FIP_NOUVEAUTES
    FIP_POP
    FIP_REGGAE
    FIP_ROCK
    FIP_STRASBOURG
    FIP_WORLD
    FORMATION
    FRANCEBLEU
    FRANCEBLEU_ALSACE
    FRANCEBLEU_ARMORIQUE
    FRANCEBLEU_AUXERRE
    FRANCEBLEU_AZUR
    FRANCEBLEU_BEARN
    FRANCEBLEU_BELFORT_MONTBELIARD
    FRANCEBLEU_BERRY
    FRANCEBLEU_BESANCON
    FRANCEBLEU_BOURGOGNE
    FRANCEBLEU_BREIZH_IZEL
    FRANCEBLEU_CHAMPAGNE_ARDENNE
    FRANCEBLEU_COTENTIN
    FRANCEBLEU_CREUSE
    FRANCEBLEU_DROME_ARDECHE
    FRANCEBLEU_GARD_LOZERE
    FRANCEBLEU_GASCOGNE
    FRANCEBLEU_GIRONDE
    FRANCEBLEU_HERAULT
    FRANCEBLEU_ISERE
    FRANCEBLEU_LA_ROCHELLE
    FRANCEBLEU_LIMOUSIN
    FRANCEBLEU_LOIRE_OCEAN
    FRANCEBLEU_LORRAINE_NORD
    FRANCEBLEU_MAINE
    FRANCEBLEU_MAYENNE
    FRANCEBLEU_NORD
    FRANCEBLEU_NORMANDIE_CAEN
    FRANCEBLEU_NORMANDIE_ROUEN
    FRANCEBLEU_ORLEANS
    FRANCEBLEU_PARIS
    FRANCEBLEU_PAYS_BASQUE
    FRANCEBLEU_PAYS_DE_SAVOIE
    FRANCEBLEU_PAYS_D_AUVERGNE
    FRANCEBLEU_PERIGORD
    FRANCEBLEU_PICARDIE
    FRANCEBLEU_POITOU
    FRANCEBLEU_PROVENCE
    FRANCEBLEU_RCFM
    FRANCEBLEU_ROUSSILLON
    FRANCEBLEU_SAINT_ETIENNE_LOIRE
    FRANCEBLEU_SUR_LORRAINE
    FRANCEBLEU_TOULOUSE
    FRANCEBLEU_TOURAINE
    FRANCEBLEU_VAUCLUSE
    FRANCECULTURE
    FRANCEINFO
    FRANCEINTER
    FRANCEMUSIC
    FRANCEMUSIQUE
    FRANCEMUSIQUE_CLASSIQUE_EASY
    FRANCEMUSIQUE_CLASSIQUE_PLUS
    FRANCEMUSIQUE_CONCERT_RF
    FRANCEMUSIQUE_EVENEMENTIELLE
    FRANCEMUSIQUE_LA_CONTEMPORAINE
    FRANCEMUSIQUE_LA_JAZZ
    FRANCEMUSIQUE_OCORA_MONDE
    MOUV
    MOUV_100MIX
    MOUV_CLASSICS
    MOUV_DANCEHALL
    MOUV_RAPFR
    MOUV_RAPUS
    MOUV_RNB
}
